/**
 * generated by Xtext 2.12.0
 */
package de.fhdo.ddmm.data.scoping;

import com.google.common.base.Function;
import com.google.common.base.Objects;
import de.fhdo.ddmm.data.ComplexType;
import de.fhdo.ddmm.data.ComplexTypeImport;
import de.fhdo.ddmm.data.Context;
import de.fhdo.ddmm.data.DataModel;
import de.fhdo.ddmm.data.DataPackage;
import de.fhdo.ddmm.data.PossiblyImportedComplexType;
import de.fhdo.ddmm.data.Version;
import de.fhdo.ddmm.data.scoping.AbstractDataDslScopeProvider;
import de.fhdo.ddmm.utils.DdmmUtils;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Scope provider for data models.
 * 
 * @author <a href="mailto:florian.rademacher@fh-dortmund.de">Florian Rademacher</a>
 */
@SuppressWarnings("all")
public class DataDslScopeProvider extends AbstractDataDslScopeProvider {
  /**
   * Build scope for a given context and reference
   */
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof PossiblyImportedComplexType) && 
      Objects.equal(reference, DataPackage.Literals.POSSIBLY_IMPORTED_COMPLEX_TYPE__COMPLEX_TYPE))) {
      return this.getScopeForPossiblyImportedComplexTypes(((PossiblyImportedComplexType) context));
    }
    return super.getScope(context, reference);
  }
  
  /**
   * Build relatively named scope for possibly imported complex types w.r.t. the import's name,
   * i.e., its "alias"
   */
  private IScope getScopeForPossiblyImportedComplexTypes(final PossiblyImportedComplexType type) {
    String _xifexpression = null;
    ComplexTypeImport _import = type.getImport();
    boolean _tripleNotEquals = (_import != null);
    if (_tripleNotEquals) {
      _xifexpression = type.getImport().getImportURI();
    }
    final String importUri = _xifexpression;
    final Version containingVersion = EcoreUtil2.<Version>getContainerOfType(type, Version.class);
    if ((containingVersion != null)) {
      final Function<DataModel, List<ComplexType>> _function = (DataModel it) -> {
        return IterableExtensions.<ComplexType>toList(it.getContainedComplexTypes());
      };
      final Function<ComplexType, List<String>> _function_1 = (ComplexType it) -> {
        return it.getQualifiedNameParts();
      };
      return DdmmUtils.<Version, DataModel, ComplexType>getScopeForPossiblyImportedConcept(containingVersion, 
        containingVersion.getQualifiedNameParts(), 
        DataModel.class, importUri, _function, _function_1);
    }
    final Context containingContext = EcoreUtil2.<Context>getContainerOfType(type, Context.class);
    if ((containingContext != null)) {
      final Function<DataModel, List<ComplexType>> _function_2 = (DataModel it) -> {
        return IterableExtensions.<ComplexType>toList(it.getContainedComplexTypes());
      };
      final Function<ComplexType, List<String>> _function_3 = (ComplexType it) -> {
        return it.getQualifiedNameParts();
      };
      return DdmmUtils.<Context, DataModel, ComplexType>getScopeForPossiblyImportedConcept(containingContext, 
        containingContext.getQualifiedNameParts(), 
        DataModel.class, importUri, _function_2, _function_3);
    }
    final DataModel containingDataModel = EcoreUtil2.<DataModel>getContainerOfType(type, DataModel.class);
    final Function<DataModel, List<ComplexType>> _function_4 = (DataModel it) -> {
      return IterableExtensions.<ComplexType>toList(it.getContainedComplexTypes());
    };
    final Function<ComplexType, List<String>> _function_5 = (ComplexType it) -> {
      return it.getQualifiedNameParts();
    };
    return DdmmUtils.<DataModel, DataModel, ComplexType>getScopeForPossiblyImportedConcept(containingDataModel, 
      null, 
      DataModel.class, importUri, _function_4, _function_5);
  }
}
